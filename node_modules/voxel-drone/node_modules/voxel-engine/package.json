{
  "name": "voxel-engine",
  "main": "lib/game.js",
  "version": "0.2.9",
  "repository": {
    "type": "git",
    "url": "git@github.com:maxogden/voxel-engine.git"
  },
  "dependencies": {
    "voxel": "0.1.0",
    "voxel-mesh": "0.1.0",
    "inherits": "1.0.0",
    "player-physics": "0.0.7",
    "three": "0.54.0",
    "raf": "0.0.1",
    "interact": "0.0.2",
    "toolbar": "0.0.2",
    "voxel-texture": "0.2.1"
  },
  "devDependencies": {
    "minecraft-skin": "0.0.1",
    "browservefy": "0.0.0"
  },
  "scripts": {
    "start": "echo \"open localhost:8080/demo/\" && ./node_modules/browservefy/bin/browservefy demo/demo.js 8080 -- -d"
  },
  "readme": "# voxel-engine\n\n## A voxel engine in javascript using three.js\n\nLearn more at http://voxeljs.com\n\nMain demo: http://maxogden.github.com/voxel-engine/\n\n# example\n\n``` js\nvar createGame = require('voxel-engine')\nvar game = createGame()\nvar container = document.querySelector('#container')\ngame.appendTo(container)\ncontainer.addEventListener('click', function() {\n  game.requestPointerLock(container)\n})\n```\n\n# API\n\n## require('voxel-engine')(options)\n\nReturns a new game instance. `options` defaults to:\n\n```javascript\n{\n  texturePath: './textures/',\n  generate: function(x,y,z) {\n    return x*x+y*y+z*z <= 20*20 ? 1 : 0 // sphere world\n  },\n  materials: [['grass', 'dirt', 'grass_dirt'], 'brick', 'dirt'],\n  cubeSize: 25,\n  chunkSize: 32,\n  chunkDistance: 2,\n  startingPosition: [35, 1024, 35],\n  worldOrigin: [0,0,0],\n  controlOptions: {jump: 6}\n}\n```\n\n## Generating voxel worlds\n\nWorlds have many chunks and chunks have many voxels. Chunks are cube shaped and are `chunkSize` x/y/z (default 32/32/32 - 32768 voxels per chunk). When the game starts it takes the `worldOrigin` and generates `chunkDistance` chunks in every x/y/z dimension (`chunkDistance` default of 2 means the game will render 2 chunks behind you, 2 in front etc for a total of 16 chunks.). \n\nWhen you create a game you can also pass functions that the game will ask for voxel data. Here is an example `generate` function that makes a randomly textured cube world with a diameter of 20 voxels:\n\n```javascript\nfunction generator(x, y, z) {\n  if (x*x + y*y + z*z > 20*20) return 0\n  return Math.floor(Math.random() * 4) + 1\n}\n```\n\nThe `generate` function will be called once for each voxel in the world. `x`, `y` and `z` will be values in voxel coordinates.\n\n## Interacting with the voxel world\n\nWhen the game renders it draws each voxel at `cubeSize` wide in three.js world coordinates (something like pixels wide). So a default chunk is 32 (`chunkSize`) * 25 (default `cubeSize`) === 800 wide.\n\nTo get the players current position you can do `gameInstance.controls.yawObject.position`. This returns a THREE.js Vector3 object (which just means an object with 'x', 'y', and 'z'). The coordinates are in world coordinates.\n\nTo look up the chunk at some world coordinates:\n\n`gameInstance.voxels.chunkAtPosition(position)`\n\nTo look up the voxel at some world coordinates (relative to that voxels chunk):\n\n`gameInstance.voxels.voxelVector(position)`\n\nCreate a new voxel at some world coordinates (handles collisions with player, etc):\n\n`gameInstance.createBlock(pos, val)`\n\n`val` can be 0 or you can also use any single digit integer 0-9. These correspond to the materials array that you pass in to the game.\n\nSet the value of a voxel at some world coordinates:\n\n`gameInstance.setBlock(pos, val)`\n\nGet the value of a voxel at some world coordinates:\n\n`gameInstance.getBlock(pos)`\n\nIf you wanna see the lower level API for voxel data manipulation look at `chunker.js` inside the voxel module.\n\n# Get the demo running\n\nvoxel.js modules use [browserify](http://browserify.org) for packaging modules together into game bundles. This means that every time you change code in your game you have to build a new bundle in order to test it out. Luckily this is very easy and can be automated:\n\n```\ncd voxel-engine\nnpm install\nnpm install browserify -g\nnpm start\n```\n\n## license\n\nBSD\n",
  "readmeFilename": "README.md",
  "_id": "voxel-engine@0.2.9",
  "description": "## A voxel engine in javascript using three.js",
  "dist": {
    "shasum": "15b8ddbcf0bfa64dcb09c4c7ab87f10be20e842f"
  },
  "_from": "voxel-engine@~0.2.9",
  "_resolved": "https://registry.npmjs.org/voxel-engine/-/voxel-engine-0.2.9.tgz"
}
